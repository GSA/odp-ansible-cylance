---
# tasks file for odp-ansible-cylance for Amazon Linux 2

- name: Create a directory if it does not exist
  file:
    path: /opt/cylance/opt/cylance/
    state: directory
    mode: '0755'

- name: Configure Cylance
  template:
    src: config_defaults.j2
    dest: /opt/cylance/config_defaults.txt

# Install through package manager when s3 bucket option is not set

- name: Install Cylance package
  package:
    name: "{{ cylance_version }}"
    state: present 
  notify: "systemd_restart_cylance"
  when: cylance_s3_bucket == ""

# Download and install Cylance package from s3 bucket when cylance_s3_bucket is set


- name: Add packages installed to facts
  package_facts:
    manager: auto

- name: Debug packages
  debug:
    msg: "{{ ansible_facts.packages }}"

- name: Ensure botocore and boto3 modules are installed
  pip:
    name:         [ "boto3", "botocore"]
    extra_args:   "--user"
  when: cylance_s3_bucket != ""

- name: Download from s3 bucket when cylance_s3_bucket is set
  aws_s3:
    bucket: "{{ cylance_s3_bucket }}"
    object: "{{ cylance_s3_prefix }}/{{ cylance_version }}"
    dest: /tmp/"{{ cylance_version }}"
    mode: get
  when: cylance_s3_bucket != ""

- name: Install Cylance using yum if package manager is yum
  yum:
    name: /tmp/"{{ cylance_version }}"
    state: present
  when: cylance_s3_bucket != "" and ansible_pkg_mgr == "yum"

- name: Remove the Cylance installer 
  file:
    path: /tmp/"{{ cylance_version }}"
    state: absent

- name: Update cylancesvc service config with HTTP proxy IF required
  lineinfile:
    path: /usr/lib/systemd/system/cylancesvc.service
    line: "Environment=http_proxy={{ cylance_http_proxy }}"
    insertbefore: '\[Install\]'
    regexp: 'Environment\=http_proxy\='
  when: cylance_http_proxy !=  ""
  notify: "systemd_restart_cylance"

- name: Update cylancesvc service config with HTTPS proxy IF required
  lineinfile:
    path: /usr/lib/systemd/system/cylancesvc.service
    line: "Environment=https_proxy={{ cylance_https_proxy }}"
    insertbefore: '\[Install\]'
    regexp: 'Environment\=https_proxy\='
  when: cylance_https_proxy != ""
  notify: "systemd_restart_cylance"
